#ifndef GDALCPP_HPP
#define GDALCPP_HPP

/*

C++11 wrapper classes for GDAL/OGR.

Version 1.0.0

https://github.com/joto/gdalcpp

Copyright 2015 Jochen Topf <jochen@topf.org>

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <algorithm>
#include <memory>
#include <stdexcept>
#include <string>
#include <vector>

#include <gdal_priv.h>
#include <gdal_version.h>
#include <ogr_api.h>
#include <ogrsf_frmts.h>

namespace gdalcpp {

#if GDAL_VERSION_MAJOR >= 2
    typedef GDALDriver gdal_driver_type;
    typedef GDALDataset gdal_dataset_type;
#else
    typedef OGRSFDriver gdal_driver_type;
    typedef OGRDataSource gdal_dataset_type;
#endif

    class gdal_error : public std::runtime_error {

        std::string m_driver;
        std::string m_dataset;
        std::string m_layer;
        std::string m_field;

    public:

        gdal_error(const std::string& message,
                   const std::string& driver = "",
                   const std::string& dataset = "",
                   const std::string& layer = "",
                   const std::string& field = "") :
            std::runtime_error(message),
            m_driver(driver),
            m_dataset(dataset),
            m_layer(layer),
            m_field(field) {
        }

        const std::string& driver() const {
            return m_driver;
        }

        const std::string& dataset() const {
            return m_dataset;
        }

        const std::string& layer() const {
            return m_layer;
        }

        const std::string& field() const {
            return m_field;
        }

    }; // class gdal_error

    namespace detail {

        struct init_wrapper {
            init_wrapper() { OGRRegisterAll(); }
            ~init_wrapper() { OGRCleanupAll(); }
        };

        struct init_library {
            init_library() {
                static init_wrapper iw;
            }
        };

        class Driver : private init_library {

            gdal_driver_type* m_driver;

        public:

            Driver(const std::string& driver_name) :
                init_library(),
                m_driver(OGRSFDriverRegistrar::GetRegistrar()->GetDriverByName(driver_name.c_str())) {
                if (!m_driver) {
                    throw gdal_error(std::string("unknown driver: '") + driver_name + "'", driver_name);
                }
            }

            gdal_driver_type& get() const {
                return *m_driver;
            }

        }; // struct Driver

        struct Options {

            std::vector<std::string> m_options;
            std::unique_ptr<const char*[]> m_ptrs;

            Options(const std::vector<std::string>& options) :
                m_options(options),
                m_ptrs(new const char*[options.size()+1]) {
                std::transform(m_options.begin(), m_options.end(), m_ptrs.get(), [&](const std::string& s) {
                    return s.data();
                });
                m_ptrs[options.size()] = nullptr;
            }

            char** get() const {
                return const_cast<char**>(m_ptrs.get());
            }

        }; // struct Options

    } // namespace detail

    class Dataset {

        struct gdal_dataset_deleter {

            void operator()(gdal_dataset_type* ds) {
#if GDAL_VERSION_MAJOR >= 2
                GDALClose(ds);
#else
                OGRDataSource::DestroyDataSource(ds);
#endif
            }

        }; // struct gdal_dataset_deleter

        std::string m_driver_name;
        std::string m_dataset_name;
        detail::Options m_options;
        std::unique_ptr<gdal_dataset_type, gdal_dataset_deleter> m_dataset;
        OGRSpatialReference m_spatial_reference;

    public:

        Dataset(const std::string& driver_name, const std::string& dataset_name, const std::string& proj = "", const std::vector<std::string>& options = {}) :
            m_driver_name(driver_name),
            m_dataset_name(dataset_name),
            m_options(options),
#if GDAL_VERSION_MAJOR >= 2
            m_dataset(detail::Driver(driver_name).get().Create(dataset_name.c_str(), 0, 0, 0, GDT_Unknown, m_options.get())) {
#else
            m_dataset(detail::Driver(driver_name).get().CreateDataSource(dataset_name.c_str(), m_options.get())) {
#endif
            if (!m_dataset) {
                throw gdal_error(std::string("failed to create dataset '") + dataset_name + "'", driver_name, dataset_name);
            }
            if (proj.empty()) {
                m_spatial_reference.SetWellKnownGeogCS("WGS84");
            } else {
                m_spatial_reference.importFromProj4(proj.c_str());
            }
        }

        const std::string& driver_name() const {
            return m_driver_name;
        }

        const std::string& dataset_name() const {
            return m_dataset_name;
        }

        gdal_dataset_type& get() const {
            return *m_dataset;
        }

        OGRSpatialReference* spatial_reference() {
            return &m_spatial_reference;
        }

        Dataset& start_transaction() {
#if GDAL_VERSION_MAJOR >= 2
            m_dataset->StartTransaction();
#endif
            return *this;
        }

        Dataset& commit_transaction() {
#if GDAL_VERSION_MAJOR >= 2
            m_dataset->CommitTransaction();
#endif
            return *this;
        }

    }; // class Dataset

    class Layer {

        Dataset& m_dataset;
        OGRLayer* m_layer;

    public:

        Layer(Dataset& dataset, const std::string& layer_name, OGRwkbGeometryType type) :
            m_dataset(dataset),
            m_layer(dataset.get().CreateLayer(layer_name.c_str(), dataset.spatial_reference(), type)) {
            if (!m_layer) {
                throw gdal_error(std::string("failed to create layer '") + layer_name + "'",
                    dataset.driver_name(), dataset.dataset_name(), layer_name);
            }
        }

        OGRLayer* get() const {
            return m_layer;
        }

        const char* name() {
            return m_layer->GetName();
        }

        Layer& add_field(const std::string& field_name, OGRFieldType type, int width, int precision=0) {
            OGRFieldDefn field(field_name.c_str(), type);
            field.SetWidth(width);
            field.SetPrecision(precision);

            if (m_layer->CreateField(&field) != OGRERR_NONE) {
                throw gdal_error(std::string("failed to create field '") + field_name + "' in layer '" + name() + "'",
                    m_dataset.driver_name(), m_dataset.dataset_name(), name(), field_name);
            }

            return *this;
        }

    }; // class Layer

    class Feature {

        OGRLayer* m_layer;
        OGRFeature m_feature;

    public:

        Feature(Layer& layer, std::unique_ptr<OGRGeometry>&& geometry) :
            m_layer(layer.get()),
            m_feature(m_layer->GetLayerDefn()) {
            m_feature.SetGeometry(geometry.get());
        }

        void add_to_layer() {
            if (m_layer->CreateFeature(&m_feature) != OGRERR_NONE) {
                std::runtime_error("feature creation failed");
            }
        }

        template <class T>
        Feature& set_field(int n, T&& arg) {
            m_feature.SetField(n, std::forward<T>(arg));
            return *this;
        }

        template <class T>
        Feature& set_field(const char* name, T&& arg) {
            m_feature.SetField(name, std::forward<T>(arg));
            return *this;
        }

    }; // class Feature

} // namespace gdalcpp

#endif // GDALCPP_HPP
